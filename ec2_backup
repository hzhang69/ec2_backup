#!/bin/bash
###################################
# ec2 backup, a backup tool using AWS
#
# Authors:
# Eli Davis <edavis1@stevens.edu>
# Paul-Anthony Dudzinski <pdudzins@stevens.edu
# Nick Noga <nnoge@stevens.edu>
#
#(c) 2014 by The Authors
#
#
###################################

#Vars
#####################
f_debug=0
method=""
volume=""
volumeStatus=""
volumeSize=""
zone="us-east-1a"
configfile=""
ec2cert=""
ec2Home=""
ec2privatekey=""
ec2flags=""
sshflags=""
instance=""

attachment=""
attachStatus=""
attachPoint="/dev/sdh"



#Functions
#####################
usage() {
echo "ec2_backup [-h] [-m method] [-v volume-id] dir "
} 

#get the size and status of the volume
#the volume id is passed as the first and only argument
getVolumeStatus() {
volumeStatus=`aws --output text ec2 describe-volumes --volume-ids $1|awk '{print$6}'`
volumeSize=`aws --output text ec2 describe-volumes --volume-ids $1|awk '{print$4}'`

#if the volume does not come back in one of these two state it is unusable by out program
if [ "$volumeStatus" != "available" ] && [ "$volumeStatus" != "creating" ];then
	echo "$volumeStatus"
	echo "The volume is in use, deleted, or there was an error creating it"
	exit 1
fi
}

#wait for the volume to become available
#there are no arguments for this function, it is dependent on global vars
volumeWait() {
	if [ $f_debug -eq 1 ]; then
		echo "Volume initializing..."
	fi
        while [ "$volumeStatus" != "available" ]; do
                getVolumeStatus $volume
		sleep 1
		if [ $f_debug -eq 1 ]; then
                echo "Waiting for the volume to be available..."
        	fi

        done
}

#This function should be passed the backup directory as the only argument
#the volume is set and checked for existence in the arg parser
#the global zone variable must be set, this can be done by the user environment or by the
#function that will create the instance 
getVolume() {

#Determine the size of the file and translate it into GB to run the command
bytesize=$(du -sb $1 2>/dev/null | cut -f1)
#this function produces a float and outputs 0 if > 1024 bytes
gbsize=$(python -c "from math import ceil; print ceil(ceil(ceil($bytesize/1024)/1024)/1024)")
#Convert gbsize to integer
gbsize=${gbsize/.*}
alloc=0

## Determine and allocate necessary volume size IF a volume was not provided
if [ -z $volume ]; then
        if [ $gbsize -eq 1 ] || [ $gbsize -eq 0 ]; then ## Minimum volume allocation is 1GB
                ## Allocate 2GB
                alloc=2
        elif [ $gbsize -lt 513 ] && [ $gbsize -gt 1 ]; then ## Maximum volume allocation is 1024GB
                ## Allocate 2*gbsize
                 let alloc=gbsize*2
        else
                echo "Directory is too large to be allocated into a single volume."
                exit 1
        fi
	if [ -z $alloc ] || [ $alloc -eq 0 ]; then
		echo "Invalid allocation size"
		exit 1
	fi

	volume=$(aws --output text ec2 create-volume --size $alloc --availability-zone $zone | awk '{print $6}')
	getVolumeStatus $volume
	#wait for the volume to be available busy wait....
	volumeWait 	
	echo $volume
else
##volume entered

	getVolumeStatus $volume
	#Only error here I can think of outside status and size is zone incompatibility
	if [ $gbsize -gt $volumeSize ]; then
		echo "The volume given is too small to backup the file"
                exit 1
	elif [ $gbsize -eq $volumeSize ] && [ $gbsize -ne 1 ]; then
		echo "The volume size and directory size are equal use a larger volume "
		exit 1
	fi

	volumeWait
	echo $volume
fi

}

getEnvironmentVars() {

configfile=$AWS_CONFIG_FILE
ec2cert=$EC2_CERT
ec2Home=$EC2_HOME
ec2privatekey=$EC2_PRIVATE_KEY
ec2flags=$EC2_BACKUP_FLAGS_AWS
sshflags=$EC2_BACKUP_FLAGS_SSH
verbose=$EC2_BACKUP_VERBOSE

}

#getInstance() {


#}







###### ATTACHMENT FUNCTIONS
#This function attaches a given volume and a given instance and ensures that the 
#volume has been attached prior to returning. It attaches to /dev/sdh which should be
#empty on a new instance. This is inside the scope of the program as no pre-existing
#instances are to be used.
attachVolume() {

#instance="i-c49669e5"     <---Testing purposes
if [ $f_debug -eq 1 ]; then
	echo "Attaching volume $volume to instance $instance..."
fi

attachment=$(aws ec2 attach-volume --volume-id $volume --instance-id $instance --device $attachPoint)
attachWait
if [ $f_debug -eq 1 ]; then
	echo "Volume $volume has successfully been attached."
fi

}

#Waits for attachment to say "attached"
attachWait() {
        if [ $f_debug -eq 1 ]; then
                echo "Waiting for attachment..."
        fi
	attachStatus=`aws ec2 describe-volumes --output text | grep $attachPoint | awk '{print $6}'`
	
	#Loop until attached
        while [ "$attachStatus" != "attached" ]; do
                
                sleep 1
                if [ $f_debug -eq 1 ]; then
                	echo "Waiting for the volume to attach..."
                fi
		
		attachStatus=`aws ec2 describe-volumes --output text | grep $attachPoint | awk '{print $6}'`
        done
}
########################


#Main
####################

while getopts "dhm:v:" o; do
    case "${o}" in
	d)
		f_debug=1
		;;
        h)
                usage
		exit 0
            ;;
        m)
		if [ "$OPTARG" = "dd" ] || [ "$OPTARG" = "rsync" ]; then
			method=$OPTARG
		else
			echo "Bad method argument choose rsync or dd"
			exit 1
		fi
            ;;
        v)
		if [[ $OPTARG =~ ^vol-.{8,20} ]]; then 
	                volume=$OPTARG
		else 
			echo "Volume id is not well formed"
			exit 1
		fi
		##Check to see if the volume is valid
		 volcheck=`aws ec2 describe-volumes --volume-ids $volume`
	 	if [[ "$volcheck" =~ ^A.client.error ]]; then
			echo "Error setting the volume, please check the volume"
			exit 1
		fi
           ;;

        *)
		usage
                exit 1;
            ;;
    esac
done

## Shift the args back the right spot
shift $(($OPTIND - 1))

if [ -z $1 ]; then
	echo "No Directory entered"
	exit 1
fi

if [ ! -d $1 ]; then
        echo "Argument is not a directory"
        exit 1
fi

##Maybe we should stat the file for error checking? Is there any case in which the above
##checks can be bypassed? More on this later
#stat $1

##Testing the functions
getVolume $1
attachVolume $instance

if [ $f_debug -eq 1 ]; then

	echo "Volume Status: " $volumeStatus
	echo "Volume Size: " $volumeSize
fi

exit 0


